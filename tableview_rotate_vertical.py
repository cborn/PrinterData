from processdata import *import webbrowserimport signalimport sysfrom flask import Flaskfrom flask import requestapp = Flask(__name__)# try to exit gracefully with CTRL-C - doesn't often workdef exit_handler(signal, frame):    print('Shutting down. Have a nice day!')    shutdown_server()    sys.exit(0)signal.signal(signal.SIGINT, exit_handler)# output of this function is displayed at http://127.0.0.1:5000/printers/@app.route("/printers/", methods=['GET'])def printer_page():    modelName = request.args.get('model')    nextModel = modelOrderToDisplay[modelName]    queryModel(modelName)    html = '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="20; http://127.0.0.1:5000/printers?model='    html += nextModel + '"><title>Printers- ITS Helpdesk</title>'    html += '<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">'    html += '<style>'    html += '.ready {color: #006600;} .half {color: #336600;}.low {color: #995500;}\    .empty {color: #CC0000;}.unknown {color: purple;}.error {color: blue;}'    html += '.model {color: #505050; word-wrap: break-word; }'    html += '.trayWidth {width: 78px;} .statusWidth {width: 130px;} .keyWidth {width: 100px;}'    html += 'table {border-collapse: collapse} td,th {padding: 2px}'    html += '.button {display: block; width: 90px; height: 20px; background: #960000; padding: 5px;\        text-align: center; border-radius: 5px; color: white; font-weight: bold; text-decoration: none;} </style>'    html += '</head><body>'           # create table for model given by URL parameter    model = modelsDict[modelName]    html += '<table border="1"><tr><th colspan="'+str(len(modelToPrinter[modelName])*2+1)    html += '" style="background-color: #f2f2f2"><p class="model">'+model.getModel()+'</p></th></tr>'    html += '<tr><td class="trayWidth"></td>'    for printer in modelToPrinter[modelName]:        html += '<th class="statusWidth">'+printer.getName()+'</th>'    html += '</tr><tr><th style="background-color: #f2f2f2">Status</th>'    for printer in modelToPrinter[modelName]:        html += '<td style="background-color: #f2f2f2">'+printer.getStatusIcon()+' '+printer.getStatus()+'</td>'    html += '</tr>'    for tray in range(model.getTrayNum()):        html += '<tr><th>Tray '+str(tray+1)+'</th>'        for printer in modelToPrinter[modelName]:            if printer.getStatus() != 'Not Responding':                if tray >= printer.getTrayNum():                    html += '<td></td>'                else:                    html += '<td>'+ printer.getPaperLevels()[tray] + printer.getPaperTypes()[tray] + '</td>'            else:                html += '<td></td>'        html += '</tr>'    toner_index = 0    for toner in model.getTonerNames():        html += '<tr><th style="background-color: #f2f2f2">'+toner+'</th>'        for printer in modelToPrinter[modelName]:            if printer.getStatus() != 'Not Responding':                html += '<td style="background-color: #f2f2f2">'+printer.getToner()[toner_index]+'</td>'            else:                html += '<td style="background-color: #f2f2f2"></td>'        toner_index += 1        html += '</tr>'    html += '<tr style="height: 100px"><th>On Screen / Errors</th>'    for printer in modelToPrinter[modelName]:        html += '<td >'+printer.getMessage()+'</td>'    html += '</tr>'    html += '</table>'    html += '<table>'    html += '<tr><td class="keyWidth"><i class="material-icons ready" style="font-size:12px">brightness_1</i> = Full</td>'    html += '<td class="keyWidth"><i class="material-icons half" style="font-size:12px">brightness_2</i> = Half</td>'    html += '<td class="keyWidth"><i class="material-icons low" style="font-size:12px">brightness_3</i> = Low</td>'    html += '<td class="keyWidth"><i class="material-icons empty" style="font-size:12px">panorama_fish_eye</i> = Empty</td>'    html += '<td class="keyWidth"><span style="font-size:20px" class="unknown">? </span> = Unknown</td>'    html += '</tr></table>'    html += '<br>'    html += '<a href="http://127.0.0.1:5000/shutdown" class="button">Shutdown</a>'    html += '<p> Go to: | '    for model in modelOrder:        html += '<a href="http://127.0.0.1:5000/printers?model='+model+'">'+model+'</a> |    '    html += '</p>'    html += '</body></html>'    html = str(html)    return html    @app.route("/shutdown/")def shutdown_server():    func = request.environ.get('werkzeug.server.shutdown')    if func is None:        raise RuntimeError('Not running with the Werkzeug Server')    func()    return 'Shutting down. Have a nice day!'if __name__ == "__main__":    # open new page automatically    firstModel = modelOrder[0]    webbrowser.open('http://127.0.0.1:5000/printers?model='+firstModel,new=2)    # starts up Flask app    app.run()